version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.15
executors:
  build_environment:
    docker:
      - image: circleci/ruby:2.5
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test

  deploy_environment:
    docker:
      - image: circleci/ruby:2.5
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle

jobs:
  build_somleng_adhearsion:
    working_directory: ~/somleng-adhearsion
    executor:
      name: build_environment

    steps:
      - checkout
      - install_dependencies

      - bundle_install:
          cache_name: somleng-adhearsion-deps

      - run:
          name: Run Specs
          command: bundle exec rspec spec

      - store_artifacts:
          name: Upload Test Coverage
          path: coverage

  deploy_production:
    working_directory: ~/somleng-adhearsion

    executor:
      name: deploy_environment

    steps:
      - aws-cli/install
      - aws-cli/configure
      - run:
          name: Assume Role
          command: |
              deploy_role=$(aws sts assume-role --role-arn "$AWS_DEPLOY_ROLE_ARN" --role-session-name "Deploy") && \
              echo "export DEPLOY_ACCESS_KEY_ID='$(echo $deploy_role | jq .Credentials.AccessKeyId | xargs)'" >> $BASH_ENV && \
              echo "export DEPLOY_SECRET_ACCESS_KEY='$(echo $deploy_role | jq .Credentials.SecretAccessKey | xargs)'" >> $BASH_ENV && \
              echo "export DEPLOY_SESSION_TOKEN='$(echo $deploy_role | jq .Credentials.SessionToken | xargs)'" >> $BASH_ENV

      - checkout
      - install_dependencies
      - bundle_source

      - run:
          name: Deploy Production
          command: |
              ./.circleci/deploy/eb_deploy create_app_version -a somleng-adhearsion -b $AWS_DEPLOY_BUCKET_NAME -c $CIRCLE_SHA1 -s $SOURCE_BUNDLE --access-key-id "$DEPLOY_ACCESS_KEY_ID" --secret-access-key "$DEPLOY_SECRET_ACCESS_KEY" --session-token "$DEPLOY_SESSION_TOKEN"
              ./.circleci/deploy/eb_deploy -s $SOURCE_BUNDLE -e somleng-adhearsion-webserver --access-key-id "$DEPLOY_ACCESS_KEY_ID" --secret-access-key "$DEPLOY_SECRET_ACCESS_KEY" --session-token "$DEPLOY_SESSION_TOKEN"

commands:
  install_dependencies:
    steps:
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get install cmake

  upgrade_bundler:
    steps:
      - run:
          name: Upgrade Bundler
          command: |
            gem update --system
            gem install bundler

  bundle_install:
    parameters:
      cache_name:
        type: string
      cache_path:
        type: string
        default: "vendor/bundle"
      yarn_cache_path:
        type: string
        default: "~/.cache/yarn"
      yarn_install:
        type: boolean
        default: true

    steps:
      - upgrade_bundler
      - restore_cache:
          keys:
            - << parameters.cache_name >>-{{ checksum "Gemfile.lock" }}
            - << parameters.cache_name >>-

      - run:
          name: Bundle Install
          command: |
              bundle install

      - save_cache:
          key: << parameters.cache_name >>-{{ checksum "Gemfile.lock" }}
          paths:
            - << parameters.cache_path >>

  bundle_source:
    steps:
      - install_dependencies
      - bundle_install:
          cache_name: somleng-adhearsion-deps

      # Re-run bundle without development and test
      - run:
          name: Bundle Install
          command: |
            bundle install --without test:development

      - run:
          name: Package Gems
          command: |
            bundle package

      - run:
          name: "Bundle source code"
          command: |
              SOURCE_BUNDLE="$(git rev-parse HEAD)-$(date +%s).zip" && \
              echo "export SOURCE_BUNDLE=$SOURCE_BUNDLE" >> $BASH_ENV && \
              git archive -o $SOURCE_BUNDLE --format=zip HEAD && \
              zip -ur $SOURCE_BUNDLE vendor/cache

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
         cron: "0 0 * * *"
         filters:
           branches:
             only:
               - develop
               - master
    jobs:
      - build_somleng_adhearsion

  build-deploy:
    jobs:
      - build_somleng_adhearsion:
          context: Somleng
      - deploy_production:
          context: Somleng
          requires:
            - build_somleng_adhearsion
          filters:
            branches:
              only: master
